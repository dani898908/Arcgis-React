{"version":3,"sources":["../node_modules/@arcgis/core/core/workers lazy groupOptions: {} namespace object","App.js","reportWebVitals.js","index.js"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","App","mapDiv","useRef","useEffect","current","map","ArcGISMap","basemap","popupTemplate","MapView","container","extent","spatialReference","wkid","xmax","xmin","ymax","ymin","title","content","type","fieldInfos","fieldName","label","scale","layer1","FeatureLayer","url","outFields","renderer","DictionaryRenderer","fieldMap","fuel_type","config","show_label","visualVariables","valueExpression","stops","value","size","minScale","maxScale","layer2","connector_types","network","name","addMany","className","ref","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oFAAA,SAASA,EAAyBC,GAGjC,OAAOC,QAAQC,UAAUC,MAAK,WAC7B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBL,EAAM,KAEjD,MADAI,EAAEE,KAAO,mBACHF,KAGRL,EAAyBQ,KAAO,WAAa,MAAO,IACpDR,EAAyBG,QAAUH,EACnCS,EAAOC,QAAUV,EACjBA,EAAyBW,GAAK,K,yLCmHfC,MAxHf,WACE,MAAMC,EAASC,iBAAO,MAoHtB,OAlHAC,qBAAU,KACR,GAAIF,EAAOG,QAAS,CAIlB,MAAMC,EAAM,IAAIC,IAAU,CACxBC,QAAS,gBAiBLC,GAdO,IAAIC,IAAQ,CACvBJ,MACAK,UAAWT,EAAOG,QAClBO,OAAQ,CACNC,iBAAkB,CAChBC,KAAM,QAERC,MAAO,SACPC,MAAO,SACPC,KAAM,QACNC,KAAM,WAIY,CAEpBC,MAAO,0BACPC,QAAS,CACP,CAIEC,KAAM,SACNC,WAAY,CACV,CACEC,UAAW,iBACXC,MAAO,aAET,CACED,UAAW,aACXC,MAAO,cAET,CACED,UAAW,qBACXC,MAAO,uBAET,CACED,UAAW,eACXC,MAAO,qBAOXC,EAAQ,MACRC,EAAS,IAAIC,UAAa,CAC9BC,IACE,qHACFC,UAAW,CAAC,KACZpB,gBACAqB,SAAU,IAAIC,UAAmB,CAC/BH,IACE,4FACFI,SAAU,CACRC,UAAW,kBAEbC,OAAQ,CACNC,WAAY,SAEdC,gBAAiB,CACf,CACEf,KAAM,OACNgB,gBAAiB,cACjBC,MAAO,CACL,CAAEC,MAAOd,EAAQ,EAAGe,KAAM,IAC1B,CAAED,MAAe,EAARd,EAAWe,KAAM,IAC1B,CAAED,MAAe,EAARd,EAAWe,KAAM,IAC1B,CAAED,MAAe,EAARd,EAAWe,KAAM,GAC1B,CAAED,MAAe,GAARd,EAAYe,KAAM,GAC3B,CAAED,MAAe,GAARd,EAAYe,KAAM,QAKnCC,SAAU,EACVC,SAAU,MAGNC,EAAS,IAAIhB,UAAa,CAC9BC,IACE,sHACFC,UAAW,CAAC,KACZpB,gBACAqB,SAAU,IAAIC,UAAmB,CAC/BH,IACE,4FACFI,SAAU,CACRC,UAAW,iBACXW,gBAAiB,qBACjBC,QAAS,aACTC,KAAQ,gBAEVZ,OAAQ,CACNC,WAAY,UAGhBM,SAAU,IACVC,SAAU,IAGZpC,EAAIyC,QAAQ,CAACrB,EAAQiB,OAEtB,IAEI,qBAAKK,UAAU,SAASC,IAAK/C,KChHvBgD,MAZSC,IAClBA,GAAeA,aAAuBC,UACxC,gCAAqB3D,MAAK,EAAG4D,SAAQC,SAAQC,SAAQC,SAAQC,cAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.7637bf8e.chunk.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 321;","import React, { useRef, useEffect } from \"react\";\nimport FeatureLayer from \"@arcgis/core/layers/FeatureLayer\";\nimport ArcGISMap from \"@arcgis/core/Map\";\nimport DictionaryRenderer from \"@arcgis/core/renderers/DictionaryRenderer\";\nimport MapView from \"@arcgis/core/views/MapView\";\nimport \"./App.css\";\n\nfunction App() {\n  const mapDiv = useRef(null);\n\n  useEffect(() => {\n    if (mapDiv.current) {\n      /**\n       * Initialize application\n       */\n      const map = new ArcGISMap({\n        basemap: \"gray-vector\",\n      });\n\n      const view = new MapView({\n        map,\n        container: mapDiv.current,\n        extent: {\n          spatialReference: {\n            wkid: 102100,\n          },\n          xmax: -13581772,\n          xmin: -13584170,\n          ymax: 4436367,\n          ymin: 4435053,\n        },\n      });\n\n      const popupTemplate = {\n        // autocasts as new PopupTemplate()\n        title: \"station: {Station_Name}\",\n        content: [\n          {\n            // It is also possible to set the fieldInfos outside of the content\n            // directly in the popupTemplate. If no fieldInfos is specifically set\n            // in the content, it defaults to whatever may be set within the popupTemplate.\n            type: \"fields\",\n            fieldInfos: [\n              {\n                fieldName: \"Fuel_Type_Code\",\n                label: \"Fuel type\",\n              },\n              {\n                fieldName: \"EV_Network\",\n                label: \"EV network\",\n              },\n              {\n                fieldName: \"EV_Connector_Types\",\n                label: \"EV connection types\",\n              },\n              {\n                fieldName: \"Station_Name\",\n                label: \"Station Name\",\n              },\n            ],\n          },\n        ],\n      };\n\n      const scale = 36112;\n      const layer1 = new FeatureLayer({\n        url:\n          \"https://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/Alternative_Fuel_Station_March2018/FeatureServer\",\n        outFields: [\"*\"],\n        popupTemplate,\n        renderer: new DictionaryRenderer({\n          url:\n            \"https://jsapi.maps.arcgis.com/sharing/rest/content/items/30cfbf36efd64ccf92136201d9e852af\",\n          fieldMap: {\n            fuel_type: \"Fuel_Type_Code\",\n          },\n          config: {\n            show_label: \"false\",\n          },\n          visualVariables: [\n            {\n              type: \"size\",\n              valueExpression: \"$view.scale\",\n              stops: [\n                { value: scale / 2, size: 20 },\n                { value: scale * 2, size: 15 },\n                { value: scale * 4, size: 10 },\n                { value: scale * 8, size: 5 },\n                { value: scale * 16, size: 2 },\n                { value: scale * 32, size: 1 },\n              ],\n            },\n          ],\n        }),\n        minScale: 0,\n        maxScale: 10000,\n      });\n\n      const layer2 = new FeatureLayer({\n        url:\n          \"https://services1.arcgis.com/4yjifSiIG17X0gW4/arcgis/rest/services/Alternative_Fuel_Station_March2018/FeatureServer\",\n        outFields: [\"*\"],\n        popupTemplate,\n        renderer: new DictionaryRenderer({\n          url:\n            \"https://jsapi.maps.arcgis.com/sharing/rest/content/items/30cfbf36efd64ccf92136201d9e852af\",\n          fieldMap: {\n            fuel_type: \"Fuel_Type_Code\",\n            connector_types: \"EV_Connector_Types\",\n            network: \"EV_Network\",\n            name  : \"Station_Name\",\n          },\n          config: {\n            show_label: \"true\",\n          },\n        }),\n        minScale: 10000,\n        maxScale: 0,\n      });\n\n      map.addMany([layer1, layer2]);\n    }\n  }, []);\n\n  return <div className=\"mapDiv\" ref={mapDiv}></div>;\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport '@arcgis/core/assets/esri/themes/dark/main.css';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}